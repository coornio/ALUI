
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Master Scroll Controller                                                                                //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

msc_multiplier = 8

msc_delta = [
	cond $editing [
		cond $.followplayer [
			follownext $arg1
		] (iskeyheld "LCTRL") [
			if $enthavesel [ entautoview $arg1 ]
		] [
			cond [&& $enthavesel [||iskeyheld "1" "2" "3" "4" "5"]] [
				loop i 5 [ if (iskeyheld (+ $i 1)) [ entattrdelta $i $arg1 ] ]
			] [iskeyheld "G"] [                                                       // Change grid power
				gridpower (max 0 (min 12 (+ $arg1 $gridpower) (- $mapscale 1)))
			] [iskeyheld "R"] [                                                       // Selection rotate / blend brush rotate
				if $blendpaintmode [ rotateblendbrush $arg1 ] [ editrotate $arg1 ]
			] [iskeyheld "Q"] [                                                       // Push corner closest to the cursor
				editfacewsel $arg1 2
			] [iskeyheld "F"] [                                                       // Push selected face/corners
				editfacewsel $arg1 0
			] [iskeyheld "Y"] [                                                       // Change MRU textures
				edittex $arg1
			] [iskeyheld "Z"] [                                                       // Change floatspeed
				floatspeed (clamp (+ $floatspeed (* 50 $arg1)) 50 5000)
			] [&& $hmapedit [iskeyheld "H"]] [                                        // Change heightmap brush
				selecthbrush $arg1
			] $blendpaintmode [                                                       // Change blendmap mode / blend brush
				if (iskeyheld "B") [
					arg1 = (+ $blendpaintmode $arg1)
					cond [< $arg1 1] [ blendpaintmode = 5 ] [> $arg1 5] [ blendpaintmode = 1 ] [ blendpaintmode $arg1 ]
				] [ nextblendbrush $arg1 ]
			] [ editfacewsel $arg1 1 ]
		]
	] $mainmenu [
		// NOTHING HERE YET
	] [isspectator $getclientnum] [
		if $thirdperson [
			loop i 10 [ sleep (* $i 10) [
				thirdpersondistance (clampf (+f $thirdpersondistance (*f $arg1 0.25)) 10 50)
			] ]
		] [ nextfollow $arg1 ]
	] [ nextweapon $arg1 ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Directional Vslot Delta                                                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// vdirdelta  DIR  ACTION   X  Y
// vdirdelta  ~~~  voffset  8  0
// DIR: 0 = NORTH, 1 = EAST, 2 = SOUTH, 3 = WEST
// meant to use camera yaw to transform vcommand coordinates for convenience
vdirdelta = [
	vdelta [
		if (> $getselface 3) [
			arg5 = (mod (div (+f $getcamyaw 45) 90) 4)
			case $arg5 0 [ // LOOKING NORTH
				case $arg1 0 [ // UP
					$arg2 0 (*f $arg4 -1)
				] 1 [          // RIGHT
					$arg2 (*f $arg3 -1)
				] 2 [          // DOWN
					$arg2 0 (*f $arg4 -1)
				] 3 [          // LEFT
					$arg2 (*f $arg3 -1)
				]
			] 1 [   // LOOKING EAST
				if (= $getselface 5) [
					arg3 = (*f $arg3 -1)
					arg4 = (*f $arg4 -1)
				]
				case $arg1 0 [ // UP
					$arg2 (*f $arg4 -1)
				] 1 [          // RIGHT
					$arg2 0 $arg3
				] 2 [          // DOWN
					$arg2 (*f $arg4 -1)
				] 3 [          // LEFT
					$arg2 0 $arg3
				]
			] 2 [   // LOOKING SOUTH
				case $arg1 0 [ // UP
					$arg2 0 $arg4
				] 1 [          // RIGHT
					$arg2 $arg3
				] 2 [          // DOWN
					$arg2 0 $arg4
				] 3 [          // LEFT
					$arg2 $arg3
				]
			] 3 [   // LOOKING WEST
				if (= $getselface 5) [
					arg3 = (*f $arg3 -1)
					arg4 = (*f $arg4 -1)
				]
				case $arg1 0 [ // UP
					$arg2 $arg4
				] 1 [          // RIGHT
					$arg2 0 (*f $arg3 -1)
				] 2 [          // DOWN
					$arg2 $arg4
				] 3 [          // LEFT
					$arg2 0 (*f $arg3 -1)
				]
			]
		] [ $arg2 $arg3 $arg4 ]
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Entity Primary Actions                                                   //
///////////////////////////////////////////////////////////////////////////////

=enttype = [ || [=s * $arg1] [=s (enttype) $arg1] ]

=entattr = [ || [=s * $arg2] [= (entattr $arg1) $arg2] ]

// clear ents of given type
clearents = [ 
	if $editing [
		entcancel
		entselect [=enttype $arg1]
		echo Deleted (enthavesel) $arg1 entities
		delent
	] 
]

// replace all ents that match current selection
// with the values given
replaceents = [
	if $editing [
		do [
			entfind @(entget)
			entset @(loopconcat+ i 1 $numargs [result $[arg@i]])
		]
		echo Replaced (enthavesel) entities
	]
]

selentedit     = [ saycommand (concat "/entset" (entget)) ]
selreplaceents = [ saycommand (concat "/replaceents" (entget)) ]
selentfindall  = [ do [ entfind @(entget) ] ]

// modify given attribute of ent by a given amount
// arg1 attribute
// arg2 value
entattrdelta = [ entattr $arg1 (+ (entattr $arg1) $arg2) ]

enttypelist = [ 
   light mapmodel playerstart envmap particles sound spotlight decal
   teleport teledest jumppad
   flag
]

enttypeselect = [
	local len next
	len = (listlen $enttypelist)
	next = (mod (+ (indexof $enttypelist (enttype)) $arg1) $len)
	if (< $next 0) [ next = (+ $next $len) ]
	do [ entset @(listsplice (entget) (at $enttypelist $next) 0 1) ]
]




///////////////////////////////////////////////////////////////////////////////
//  Copy & Paste Commands                                                    //
///////////////////////////////////////////////////////////////////////////////

// 3 types of copying and pasting
// 1. select only cubes      -> paste only cubes
// 2. select cubes and ents  -> paste cubes and ents. same relative positions
// 3. select only ents       -> paste last selected ent. if ents are selected, replace attrs as paste

opaquepaste = 1
entcopymode = 0

editcopy = [
	if (|| havesel [! (enthavesel)]) [
		entcopymode = 0
		copy
	] [ entcopymode = 1 ]
	entcopy
]

editpaste = [
	local cancelpaste
	cancelpaste = (! (|| enthavesel havesel))
	if $entcopymode [
		entreplace
		if $cancelpaste cancelsel
	] [
		pastehilite
		reorient // temp; real fix will be in octaedit
		onrelease [
			if $opaquepaste delcube 
			paste
			entpaste
			if $cancelpaste cancelsel
		]
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Selection Commands                                                       //
///////////////////////////////////////////////////////////////////////////////

// select ents with given properties
// '*' is wildcard
entfind = [
	if $numargs [
		entselect (concat [ && [=enttype @@arg1] ] (loopconcat i (- $numargs 1) [
			result [ [=entattr @@i @@[arg@(+ $i 2)]] ]
		]))
	] [ entselect 1 ]
]

entfindinsel = [
	if $numargs [
		entselect (concat [ && insel [=enttype @@arg1] ] (loopconcat i (- $numargs 1) [
			result [ [=entattr @@i @@[arg@(+ $i 2)]] ]
		]))
	] [ entselect insel ]
]

drag       = [ dragging 1 ; onrelease [ dragging 0 ] ]
corners    = [ selectcorners 1 ; dragging 1 ; onrelease [ selectcorners 0 ; dragging 0 ] ]
editmove   = [ moving 1 ; onrelease [ moving 0 ] ; result $moving ]
entdrag    = [ entmoving 1 ; onrelease [ entmoving 0 ] ; result $entmoving ] 
editdrag   = [ cancelsel ; || entdrag drag ]
selcorners = [ if $hmapedit hmapselect [ cancelsel ; || entdrag corners ] ]
editextend = [ || entdrag [ if havesel [ selextend ; reorient ; editmove ] drag ] ]

editmovewith = [
	if (havesel) [
		|| editmove arg1
		onrelease [ moving 0 ; dragging 0 ]
	] arg1
]

editmovecorner = [ editmovewith selcorners ]
editmovedrag   = [ editmovewith editdrag ]




///////////////////////////////////////////////////////////////////////////////
//  Miscellaneous Editing Commands                                           //
///////////////////////////////////////////////////////////////////////////////

editfacewsel = [
	if (|| havesel [! (enthavesel)]) [
		if $moving [ pushsel $arg1 ] [
			entcancel
			editface $arg1 $arg2
		]
	]
]


//entdirection  SCROLL_DELTA
entdirection = [
	if (&& enthavesel [= $havesel 0]) [
		cond (> (indexof "playerstart teledest flag" $enttype) -1) [
			entattr 0 (mod (round (+ (entattr 0) (* 15 $arg1) 360) 15) 360)
		] [> (indexof "decal mapmodel" $enttype) -1] [
			arg2 = (- 4 (div $getselentface 2) 1)
			entattr $arg2 (mod (round (+ (entattr $arg2) (* 5 $arg1) 360) 5) 360)
		] [=s $enttype "jumppad"] [
			arg2 = (mod (+ (div $getselentface 2) 1) 3)
			entattr $arg2 (+ (entattr $arg2) $arg1)
		]
		result 1
	] [ result 0 ]
]

editdel    = [ if (! $enthavesel) delcube ; delent ]
editflip   = [ flip ; entflip ]
editrotate = [ || (entdirection $arg1) [ rotate $arg1 ; entrotate $arg1 ] ]
editcut    = [  
	if (moving 1) [
		if (= $moving 1) selsave
		onrelease [ 
			moving 0
			if (selmoved) [
				selswap
				copy ; entcopy
				delcube ; delent
				selrestore
				paste ; entpaste
			]
		]
	]
]

//setting_entediting = 1

passthrough = [ 
	passthroughsel $arg1
	if $arg1 [
		passthroughcube_bak = $passthroughcube
		passthroughcube 1
	] [ passthroughcube $passthroughcube_bak ]
	entcancel
	if $.entediting [ entediting (! $arg1) ]
]

entcomplete = [ listcomplete $arg1 $enttypelist ]
entcomplete "newent"
entcomplete "entfind"
entcomplete "clearents"

listcomplete editmat "air water clip glass noclip lava gameclip death nogi alpha"
air = [ editmat air ]
looplist i ["" 1 2 3 4] [
	[water@i] = [ editmat water@i ]
	[lava@i]  = [ editmat lava@i  ]
	[glass@i] = [ editmat glass@i ]
]
clip     = [ editmat clip     ]
noclip   = [ editmat noclip   ]
gameclip = [ editmat gameclip ]
death    = [ editmat death    ]
nogi     = [ editmat nogi     ]
alpha    = [ editmat alpha    ]

blendpaintmodes = [ "Off" "Overwrite" "Merge" "Inverted Erase" "Inverted Merge" "Erase" ]

setminimap = [ minimapheight (at $getcampos 2) ]
setsundir = [ sunlightyaw $getcamyaw ; sunlightpitch $getcampitch ]
getsundir = [ sunlightyaw ; sunlightpitch ]

///////////////////////////////////////////////////////////////////////////////////////////

suncamangle = [
    atan2 (-f (
            *f (cos $getcamyaw) (sin $sunlightyaw)
        ) (
            *f (sin $getcamyaw) (cos $sunlightyaw) (cos (-f $sunlightpitch $getcampitch))
        )
    ) (*f (sin (-f $sunlightpitch $getcampitch)) (cos $sunlightyaw))
]

suncamdist = [
	acos (+f (
		*f (sin $sunlightpitch) (sin $getcampitch)
	) (
		*f (cos $sunlightpitch) (cos $getcampitch) (cos (-f $sunlightyaw $getcamyaw))
	))
]

// XXX
// experimental UI for testing sun direction/distance graphic
// mostly works, but the math is inaccurate still
newui "sundir" [
	uiallowinput 0
	uieschide 0

	if (&& $editing $sunlight) [
		n = (round (+f 180 (suncamangle)) 0.001)
		uitriangle $sunlight $.UI_pad_2XL $.UI_pad_5XL $n
		uitriangleoutline $c_line1 $.UI_pad_2XL $.UI_pad_5XL $n
		uifont "default_outline" [ // remove this block if needed
			uivlist 0 [
				// angle and distance of sunlight in relation to camera
				uitext (format "angle:^f3 %1 ^f7- dist: ^f3%2" (round (suncamangle) 0.01) (round (suncamdist) 0.01)) 0.5
				// relativity of latitude in relation to camera
				uitext (format "COSp: ^f0%1 ^f7SINp: ^f0%2" (absf (cos $getcampitch)) (absf (sin $getcampitch))) 0.5
				uitext (format "COSy: ^f0%1 ^f7SINy: ^f0%2" (absf (cos (divf $getcamyaw 2))) (absf (sin (divf $getcamyaw 2)))) 0.5
				// sunlight pitch/yaw diffs in relation to camera
				//uitext (concat "pitch diff:^f5" (round $pitchdiff 0.01)) 0.5
				//uitext (concat "yaw diff:^f5" (round $yawdiff 0.01)) 0.5
				//uitext (concat "yaw rel:^f8" (yawrel)) 0.5
				//uitext (concat "test1 rel:^f8" (test1)) 0.5
				//uitext (concat "test2 rel:^f8" (test2)) 0.5
			]
		]
	]
]
//showui sundir

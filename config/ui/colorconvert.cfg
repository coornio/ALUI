
// Compresses RGB32 color to INT format
// usage: /RGB32toINT #A #R #G #B [ action ]
// INT variables (separate): $a $r $g $b
RGB32_to_INT = [
	local a r g b
	a = (<< $arg1 24)
	r = (<< $arg2 16)
	g = (<< $arg3  8)
	b =     $arg4
	if (>= $numargs 5) [ doargs $arg5 ] [ + $a $r $g $b ]
]

// Converts INT color to RGB32 format
// usage: /INT_to_RGB32 #INT [ action ]
// RGB32 variables: $a $r $g $b
INT_to_RGB32 = [
	local a r g b
	a =    (>> $arg1 24)
	r = (& (>> $arg1 16) 255)
	g = (& (>> $arg1  8) 255)
	b = (&     $arg1     255)
	if (< $numargs 2) [ concat $a $r $g $b ] [ doargs $arg2 ]
]

// Converts RGB32 color to HEX data
// usage: /RGB32_to_HEX #A #R #G #B #length [ action ]
// HEX variables: $hex
RGB32_to_HEX = [
	local hex
	hex = (tohex (
		RGB32_to_INT $arg1 $arg2 $arg3 $arg4
	) (? $arg5 (min $arg5 16) 6))
	if (< $numargs 6) [ result $hex ] [ doargs $arg6 ]
]

// Converts RGB24 color to HSV data
// usage: /RGB24_to_HSV #R #G #B [ action ]
// HSV variables: $h $s $v
RGB24_to_HSV = [
	local r g b mn d h s v
	r  = (divf $arg1 0xFF)
	g  = (divf $arg2 0xFF)
	b  = (divf $arg3 0xFF)
	v  = (maxf $r $g $b)
	mn = (minf $r $g $b)
	if (=f $mn $v) [
		d = 0
		h = 0
		s = 0
	] [
		d = (-f $v $mn)
		s = (divf $d $v)
		h = (casef $v $r [
			floor (*f 60 (modf (divf (-f $g $b) $d) 6))
		] $g [
			*f 60 (+f (divf (-f $b $r) $d) 2)
		] $b [
			*f 60 (+f (divf (-f $r $g) $d) 4)
		])
	]
	if (< $numargs 4) [ concat $h $s $v ] [ doargs $arg4 ]
]

// Converts HSV data to RGB24 format
// usage: /HSV_to_RGB24 #H #S #V [ action ]
// RGB24 variables: $r $g $b
HSV_to_RGB24 = [
	local c x m r g b
	c = (*f $arg3 $arg2)
	x = (*f $c (-f 1 (absf (-f (modf (divf $arg1 60) 2) 1))))
	m = (-f $arg3 $c)
	h = (div $arg1 60)
	r = (round (*f 255 (+f (at [@c @x 0 0 @x @c] $h) $m)))
	g = (round (*f 255 (+f (at [@x @c @c @x 0 0] $h) $m)))
	b = (round (*f 255 (+f (at [0 0 @x @c @c @x] $h) $m)))
	if (< $numargs 4) [ concat $r $g $b ] [ doargs $arg4 ]
]

///////////////////////////////////////////////////////////////////////////////
//  Refresh                                                                  //
///////////////////////////////////////////////////////////////////////////////

reui = [
	exec "config/ui/style.cfg"         // UI Stylesheet
	exec "config/ui/lib.cfg"           // UI Library
	exec "config/ui/common.cfg"        // UI Commons
	exec "config/ui/helpers.cfg"       // Helper Functions Library
	exec "config/ui/colorconvert.cfg"  // UI Color Conversion Library
	loopfiles f "config/ui/hud" cfg [
		exec (concatword "config/ui/hud/" $f ".cfg")   // HUD interface
	]
	loopfiles f "config/ui/menus" cfg [
		exec (concatword "config/ui/menus/" $f ".cfg") // UI Menus
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Standard Game Library - S                                                //
///////////////////////////////////////////////////////////////////////////////

getmaster     = [ listfilter i $arg1 [ismaster    $i]]
getadmin      = [ listfilter i $arg1 [isadmin     $i]]
getauth       = [ listfilter i $arg1 [isauth      $i]]
getspectator  = [ listfilter i $arg1 [isspectator $i]]
getignored    = [ listfilter i $arg1 [isignored   $i]]
getbots       = [ listfilter i $arg1 [isai        $i]]
getdead       = [ listfilter i $arg1 [isdead      $i]]
getlagged     = [ listfilter i $arg1 [islagged    $i]]
 
get!master    = [ listfilter i $arg1 [! (ismaster    $i)] ]
get!admin     = [ listfilter i $arg1 [! (isadmin     $i)] ]
get!auth      = [ listfilter i $arg1 [! (isauth      $i)] ]
get!spectator = [ listfilter i $arg1 [! (isspectator $i)] ]
get!ignored   = [ listfilter i $arg1 [! (isignored   $i)] ]
get!bots      = [ listfilter i $arg1 [! (isai        $i)] ]
get!dead      = [ listfilter i $arg1 [! (isdead      $i)] ]
get!lagged    = [ listfilter i $arg1 [! (islagged    $i)] ]

clamp  = [ max  $arg2 (min  $arg3 $arg1) ]
clampf = [ maxf $arg2 (minf $arg3 $arg1) ]

chatsay     = [ inputcommand $arg1 [say     $commandbuf] "^f7[all]^f7"  s ]
chatteamsay = [ inputcommand $arg1 [sayteam $commandbuf] "^f8[team]^f7" s ]
chatexec    = [ inputcommand $arg1 [do      $commandbuf] "^f5[exec]^f7" s ]

demo = [ stopdemo ; if (mode -1) [ map $arg1 ] ]

do [
	local n ; n = 0
	looplist m $modelist [
		$m = [ if (mode @n) [ map $arg1 ] ]
		complete $m "media/map" ogz
		n = (+ $n 1)
	]
	coop = [ if (mode 0) [ map $arg1 ] ]
]

complete demo .           dmo
complete map  "media/map" ogz // global handle
complete coop "media/map" ogz // legacy handle

togglemainmenu = [ || hidetopui [ toggleui "main" ] ]
//toggletaskbar  = [ UItaskbarvisible (! $UItaskbarvisible) ]
togglefullcon = [
	if (uivisible "fullconsole") [
	   if (> $fullconsize 50) [ fullconsize 35 ] [ hideui "fullconsole" ]
	] [ fullconsize 75 ; showui "fullconsole" ]
]

notepad = [
	if $numargs [ notepadpath = $arg1 ]
	showui "notepad"
]

nextspecmode = [
	if $specmode [
		specmode (mod (+ $specmode 1) 3)
	] [
		specmode (+ (> $getfollow -1) 1)
	]
]

dozoom = [
	if $zoomtoggle [
		zoom (? $zoom -1 1)
	] [
		zoom 1
		onrelease [ zoom -1 ]
	]
]

genusermaps = [
	usermaps ""
	loopfiles m "media/map" "ogz" [
		if (< (indexof (concat $defdmmaps $testmaps) $m) 0) [
			usermaps = (concat $usermaps $m)
		]
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Standard Game Library - M                                                //
///////////////////////////////////////////////////////////////////////////////

cmd = [
	arg5 = 0 // cheap way to avoid declaring a local var
	loopwhile i (listlen $arg1) [>= $arg5 0] [
		if ((at $arg1 $i)) [
			doargs (at $arg2 $i)
			arg5 = (+ $arg5 1)
		] [
			doargs (at $arg3 $i)
			arg5 = -1
		]
	]
	if (= $arg5 (listlen $arg1)) [ doargs $arg4 ]
]

followplayer = [
	if $editing [
		.followlist (get!spectator $listclients)
		if (< (indexof $.followlist $.followcn) 0) [ .followcn (at $.followlist 0) ]
		if (= $.crosshairsize 0) [
			.crosshairsize $crosshairsize
			crosshairsize 0
			.followplayer 1
		]
		sleep 1 [ goto $.followcn ; followplayer ]
	] [
		crosshairsize $.crosshairsize
		.crosshairsize 0
		.followplayer 0
	]
]

copymapcfg = [
	if (&& $numargs [! $mainmenu]) [
		.cmc_from $arg1
		.cmc_to   (? (= $numargs 2) $arg2 $mapname)
		if (findfile (concatword "media/map/" $.cmc_from ".cfg")) [
			if (findfile (concatword "media/map/" $.cmc_to ".cfg")) [ showui "dialog_copycfg" ] [
				textfocus "#copymapcfg"
				textload (concatword "media/map/" $.cmc_from ".cfg")
				textsave (concatword "media/map/" $.cmc_to   ".cfg")
			]
		] [
			echo (format "^f8%1 ^f7: no such map config!" $.cmc_from)
			.cmc_from "" ; .cmc_to ""
		]
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Startup Sanitization Routines                                            //
///////////////////////////////////////////////////////////////////////////////


if $.followplayer [
	crosshairsize $.crosshairsize
	.crosshairsize 0
	.followplayer 0
]

genusermaps

musicvol $.musicvol




///////////////////////////////////////////////////////////////////////////////
//  Crosshair Definitions                                                    //
///////////////////////////////////////////////////////////////////////////////


loadcrosshair "media/interface/crosshair/d.png" 0




///////////////////////////////////////////////////////////////////////////////
//  Hook Definitions                                                         //
///////////////////////////////////////////////////////////////////////////////

edittoggled = [
	if $editing [
		showui "edithud"
		if (! (uivisible "fullconsole")) [ showui "editvars" ]
	] [
		hideui "edithud"
		hideui "editvars"
		hideui "material"
		hideui "texture_browser"
		hideui "mapmodel_browser"
	]
]

mainmenutoggled = [
	if $mainmenu [
		hideui "scoreboard"
		music "sound/music/mainmenu.ogg"
	] [
		
	]
]


togglemusicloop = [
	local volslice = (divf $.musicvol 20)
	loop n 10 [
		sleep (* $n 25) [
			musicvol (max 0 (-f $musicvol $volslice))
		]
	]
	sleep 250 [
		music ""
		sleep (* $n 25) [
			musicvol (min 255 (+f $musicvol $volslice))
		]
		musicvol @musicvol
	]
]




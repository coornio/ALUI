
/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//                          UI ELEMENTS LEGEND                                 //
//                                                                             //
//  #1  menu, panel, stddialog, quickdialog, menutitle & title buttons         //
//  #2  fastimg, bar, triangle, checkbox, radio, arrowbutton & keybox          //
//  #3  settip, cleartip, hoveronce, hoversound, scrollsound                   //
//      coswave, sinwave, setshelf, tabaction & setblurbg                      //
//  #4  basicfield, basiceditor, tooltipbox & activetable                      //
//  #5  box, buttonarea & button                                               //
//  #6  scrollbars, (slim/bar)sliders, (color/spectrum)sliders & optionslider  //
//  #7  HUD: hudcell, hudcellslider, entcell, entcolor12/24                    //
//  #8  KB HOOK: advfieldLA/RA/CA, helper funcs KBclean & KBinput              //
//                                                                             //
//   ui*    hardcoded functions                                                //
//   UI*    custom functions                                                   //
//  .UI*   advanced custom functions (not for use by those inexperienced)      //
//   UI_*   variables                                                          //
//  .UI_*  advanced variables (not for use by those inexperienced)             //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

uiclamp.x = [ uiclamp  1 1 0 0 ]
uiclamp.y = [ uiclamp  0 0 1 1 ]
uiclamp.e = [ uiclamp  1 1 1 1 ]
uiclamp-x = [ uiclamp- 1 1 0 0 ]
uiclamp-y = [ uiclamp- 0 0 1 1 ]
uiclamp-e = [ uiclamp- 1 1 1 1 ]
uiclamp*x = [ uiclamp* 1 1 0 0 ]
uiclamp*y = [ uiclamp* 0 0 1 1 ]
uiclamp*e = [ uiclamp* 1 1 1 1 ]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #1  menu, panel, stddialog, quickdialog, menutitle & title buttons                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UImenutitle [ title children ] Y [ button-area-children ]
UImenutitle = [
	if $arg2 [] [ arg2 = $.UI_pad_6XL ]
	uivgradient $c_main1 $c_main2 0 $arg2 [
		uifont "default_outline" arg1
		if (> $numargs 2) [
			uispace $.UI_pad_S 0 [
				uihlist 0 arg3
			] ; uialign- 1 -1
		]
	] ; uiclamp-x
]

UItitlebutton_mini = [
	UIbuttonarea "hold2 $c_line2 n n" @(*f $.UI_pad_L 3.4) @(*f $.UI_pad_L 2.7) [
		UIfastimg "ui/" "ui_mini" "" $.UI_pad_2XL
		uirelease [
			if (< (indexof $.UI_taskbar $uiname) 0) [
				append .UI_taskbar (escape $uiname)
			] ; hideui $uiname
		]
	]
]

UItitlebutton_exit = [
	UIbuttonarea "hold2 $c_darkred n n" @(*f $.UI_pad_L 5.0) @(*f $.UI_pad_L 2.7) [
		UIfastimg "ui/" "ui_exit" "" $.UI_pad_2XL
		uirelease [ hideui $uiname ]
	]
]

// UImenu "NAME" [ children ] [ on-show ] [ on-hide ] [ ui-children ] [ title-children ] [ title-buttons ]
// NOTE: title buttons are formatted like so: [ [titlebutton-name arg1 arg2 ..] .. ]
UImenu = [
	newui $arg1 [
		@arg5
		if (getalias .UI_KBisoob) [
			uieschide 0
			uiescpress [ .UI_KBclean ]
			uipress    [ .UI_KBclean ]
		]
		@(? (>= $numargs 6) [
			uivlist 0 [
				UImenutitle [@@@arg6] 0 [
					@@@(if (= $numargs 7) [
						looplistconcat i [@@arg7] [ result [UItitlebutton_@i ;] ]
					] [ result [UItitlebutton_mini ; UItitlebutton_exit] ])
				]
				uicolor $c_menu 0.01 0.01 [
					uitiledimage "media/interface/ui/ui_bg0.png" $.UI_pad_SXL $.UI_pad_SXL
					uispace $.UI_pad_L $.UI_pad_L [@@@@arg2]
					uiclamp*e
				]
			]
		] [
			uicolor $c_menu 0.01 0.01 [
				uitiledimage "media/interface/ui/ui_bg0.png" $.UI_pad_SXL $.UI_pad_SXL
				uispace $.UI_pad_L $.UI_pad_L [@@@arg2]
				uiclamp*e
			]
		])
		uioutline $c_line1
		uiclamp*e
	] [
		UIsetbgblur 1
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg3
	] [
		UIsetbgblur -1
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg4
	]
]

// UIpanel "NAME" [ children ] [ on-show ] [ on-hide ] [ ui-children ]
UIpanel = [
	newui $arg1 [
		@arg5
		uicolor $c_diag2 0.01 0.01 [
			uispace $.UI_pad_L $.UI_pad_L [ @@@arg2 ]
			uioutline $c_line1
			uiclamp*e
		]
		uiclamp*e
	] [
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg3
	] [
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg4
	]
]

// UIstddialog "NAME" [ children ] [ true ] [ false ] [ on-show ] [ on-hide ]
UIstddialog = [
	newui $arg1 [
		uispace 0.025 0 [
			uiclamp.e
			style_generic_box d n d d n
			uiclamp*e
		]
		uispace 0 $.UI_pad_L [
			uihlist 0 [
				uifill 0 0.065 [
					uialign -2 -1
					UIbuttonarea "" $.UI_pad_DSS $.UI_pad_DSS [
						uialign -2 1
						UIfastimg "ui/" "yes" "" (+f $.UI_pad_6XL (uihold? 0 (uihover? (*f (UIcoswave 500) $.UI_pad_ML) 0)))
						uirelease [ @@@@@@arg3 ; hideui $uiname ]
						UIhoveronce [ UIsetmillis ]
					]
				]
				@@@arg2
				uifill 0 0.065 [
					uialign -2 -1
					UIbuttonarea "" $.UI_pad_DSS $.UI_pad_DSS [
						uialign -2 1
						UIfastimg "ui/" "no" "" (+f $.UI_pad_6XL (uihold? 0 (uihover? (*f (UIcoswave 500) $.UI_pad_ML) 0)))
						uirelease [ @@@@@@arg4 ; hideui $uiname ]
						UIhoveronce [ UIsetmillis ]
					]
				]
			]
		]
	] [
		UIsetbgblur 1
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg5
	] [
		UIsetbgblur -1
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg6
	]
]

// UIquickdialog "NAME" [ ui/bg-children ] [ children ] [ on-show ] [ on-hide ]
UIquickdialog = [
	newui $arg1 [
		@arg2
		@(? $arg3 [
			uispace $.UI_pad_L $.UI_pad_L [
				uiclamp.e
				@@arg3
			]
		])
	] [
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg4
	] [
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg5
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #2  fastimg, bar, triangle, checkbox, radio, arrowbutton & keybox                                       //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIfastimg PATH1 PATH2 PATH3 X Y [ children ]
UIfastimg = [
	if $arg5 [] [ arg5 = $arg4 ]
	uiimage (concatword "media/interface/" $arg1 $arg2 $arg3 ".png") $arg4 $arg5 [ doargs $arg6 ]
]

// UIbar CLAMP-X CLAMP-Y SPACE-X SPACE-Y
UIbar = [
	if (> $numargs 2) [
		uispace $arg3 $arg4 [
			uiclamp $arg1 $arg1 $arg2 $arg2
			uiline $c_line1
			uiclamp- $arg1 $arg1 $arg2 $arg2
		]
	] [
		uiline $c_line1
		uiclamp- $arg1 $arg1 $arg2 $arg2
	]
]

// UItriangle 0xCOLOR X Y ROTATION
UItriangle = [
	uigroup [
		if $arg1 [] [ arg1 = $c_baige ]
		if $arg2 [] [ arg2 = $.UI_pad_L ]
		if $arg3 [] [ arg3 = $arg2 ]
		uitriangle $arg1 $arg2 $arg3 $arg4
		uitriangleoutline $arg1 $arg2 $arg3 $arg4
	]
]

// UIcheckbox [ condition ] SIZE 0xAARRGGBB/ICON-ON 0xAARRGGBB/ICON-OFF [ children ]
UIcheckbox = [
	arg1 = (arg1)
	if $arg2 [] [ arg2 = $.UI_pad_2XL ]
	if $.UI_useimg [ UIfastimg "ui/" "ui_checkbox" $arg1 $arg2 $arg2 $arg5 ] [
		if $arg4 [] [ arg4 = $c_cb0 ]
		if $arg3 [] [ arg3 = $c_cb1 ]
		uicolor (? $arg1 $arg3 $arg4) $arg2 $arg2 [
			style_generic_gradient2
			uioutline (? $arg1 $arg3 $c_line1)
			uiclamp*e
			do $arg5
		]
	]
]

// UIradio [ condition ] SIZE 0xAARRGGBB/ICON-ON 0xAARRGGBB/ICON-OFF [ children ]
UIradio = [
	arg1 = (arg1)
	if $arg2 [] [ arg2 = $.UI_pad_2XL ]
	if $.UI_useimg [ UIfastimg "ui/" "ui_radio" $arg1 $arg2 $arg2 $arg5 ] [
		if $arg4 [] [ arg4 = $c_cb0 ]
		if $arg3 [] [ arg3 = $c_cb1 ]
		uicircleoutline $c_line1 $arg2 [
			uicircle (? $arg1 $arg3 $arg4) $arg2 [
				uicircleoutline (? $arg1 $arg3 $c_line1) $arg2
				do $arg5
			]
		]
	]
]

// UIkeybox X Y [ key-children ] 0xAARRGGBB [ children ]
UIkeybox = [
	if $arg2 [] [ arg2 = $arg1 ]
	if $arg4 [] [ arg4 = 0x505050 ]
	uigroup [
		uicolor $arg4 (-f $arg1 0.004) (-f $arg2 0.003) [ style_generic_gradient2 ; uiclamp-e ]
		uistretchedimage "media/interface/ui/io/frame.png" 0.025 0.025 [ uifill $arg1 $arg2 $arg5 ]
		uioffset 0 -0.0035 [ doargs $arg3 ]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #3  settip, cleartip, hoveronce, hoversound, scrollsound                                                //
//      coswave, sinwave, setshelf, tabaction & setblurbg                                                   //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

UIsettip     = [ uihover [ [.@[uiname]_tip] = $arg1 ] ]
UIcleartip   = [ uihover [] [ [.@[uiname]_tip] = "" ] ]

// container to trigger an action only once upon hover
UIhoveronce = [
	uitarget 0 0 [
		if (&& $ui!hover? [! $uihold?] [! $uieschold?]) $arg1
		uihover [ uitarget ; uiclamp-e ]
	] ; uiclamp-e
]

// trigger sound upon hovering a UI element
UIhoversound = [
	if $.UI_sounds [ UIhoveronce [
		playsound @@(registersound "uihover.wav" 150)
	] ]
]

// trigger sound upon scrolling a UI element
UIscrollsound = [
	if $.UI_sounds [
		playsound @(registersound "uiscroll.wav" 180)
	]
]

// UIcoswave  rep-millis
// retrieve Y coswave value based on UI's current millis footprint
UIcoswave = [ coswave (abs (- $getmillis $[.UImillis_@uiname])) $arg1 ]

// UIsinwave  rep-millis
// retrieve Y sinwave value based on UI's current millis footprint
UIsinwave = [ sinwave (abs (- $getmillis $[.UImillis_@uiname])) $arg1 ]

// UIsetmillis  var-name
// set a UI's millis footprint to current millis
UIsetmillis = [ [.UImillis_@(? $numargs $arg1 $uiname)] = $getmillis ]

// UIsetshelf  ui_name
// init a UI's shelf value to 0 when arg1 is provided or perform a shelf show/hide with a hover loop
UIsetshelf = [
	if $numargs [ [.UIshelf_@arg1] = 0 ] [
		arg1 = [.UIshelf_@uiname]
		uihover [
			if (<f $$arg1 1.0) [ $arg1 = (clampf (+f $$arg1 0.1) 0 1) ]
		] [
			if (>f $$arg1 0.0) [ $arg1 = (clampf (-f $$arg1 0.1) 0 1) ]
		]
	]
]

// UItabaction  STATE_1  STATE_2  [ action_1 ]  [ action_2 ]
UItabaction = [
	if $.UI_clicktab [ $arg1 $arg3 ] [
		$arg2 (? (< $numargs 4) $arg3 $arg4)
	]
]

// UIsetbgblur  DELTA
// add or remove blur postfx to screen depending on provided delta
UIsetbgblur = [
	case $arg1 1 [
		if (&& $.UI_blurring [! $.UI_blurbg]) [
			addpostfx "sobel"
			loop i 8 [ addpostfx "uiblur" ]
		]
		.UI_blurbg (+ $.UI_blurbg $arg1)
	] -1 [
		.UI_blurbg (+ $.UI_blurbg $arg1)
		if (! $.UI_blurbg) clearpostfx
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #4  basicfield, basiceditor, tooltipbox & activetable                                                   //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIbasicfield VAR STRLEN [ on-change ] TEXTSIZE [ children ] [ blank-field children ]
UIbasicfield = [
	uicolor $c_menu_m 0 0 [
		uihover [ uioutline (coswave.INT $c_line1 $c_line2 500) ] [ uioutline $c_line1 ]
		uiclamp-e
		uifield $arg1 $arg2 $arg3 $arg4 [
			arg5
			uifocus [ uioutline $c_red ] [
				if (=s $$arg1 "") [ doargs $arg6 ]
			]
			uiclamp-e
		]
	]
]

// UIbasiceditor VAR STRLEN STRLINES TEXTSIZE [ on-change ] PERSISTENCE [ children ]
UIbasiceditor = [
	uicolor $c_menu_m 0 0 [
		uihover [ uioutline (coswave.INT $c_line1 $c_line2 500) ] [ uioutline $c_line1 ]
		uiclamp-e
		uitexteditor $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 [
			arg7
			uifocus [ uioutline $c_red ]
			uiclamp-e
		]
	]
]

// UItooltipbox X Y [ children ] SCROLLSPEED [ bottom children ]
UItooltipbox = [
	UIcleartip
	if (=f $arg4 0.0) [ arg4 = (*f $arg2 2) ]
	uihlist 0 [
		uiline $c_line1 0 $arg2 [ uialign 0 -1 ]
		uivlist 0 [
			uigroup [
				uiscroll (+f $arg1 $.UI_pad_L $.UI_pad_3XL) $arg2 [
					uifill $arg1 $arg2 $arg3
				]
				UIbar 1 ; uialign- 0 -1 // gotta make sure it draws on top
			]
			UIbar 1
			uihlist 0 [
				uiclamp.x
				uihlist $.UI_pad_S [
					uiline $c_line1 $.UI_pad_S $.UI_pad_3XL
					if (!=s (getalias [.@[uiname]_tip]) "") [
						UIfastimg "ui/" "ui_question" "1" $.UI_pad_3XL $.UI_pad_3XL
						uiclip 0 $.UI_pad_3XL [ uitext $[.@[uiname]_tip] 0.5 ]
					] [ UIfastimg "ui/" "ui_question" "0" $.UI_pad_3XL $.UI_pad_3XL ]
				]
				if (> $numargs 4) [
					uiclip 0 $.UI_pad_3XL [
						uihlist $.UI_pad_S [
							arg5
							uifill
						]
					]
				]
			]
			uioffset $.UI_pad_S 0 [
				uiclamp.x
				UIbar 1
			]
		]
		uivlist 0 [ // purely cosmetic lines
			uiclamp.y
			uiline $c_line1 $.UI_pad_L
			uigroup [
				uiline $c_line1 $.UI_pad_S $.UI_pad_3XL ; uialign- -1
				uiline $c_line1 $.UI_pad_L              ; uialign-  0 1
			]
		]
		UIvscroll 0 (+f $arg2 $.UI_pad_3XL) $arg4
	]
]

// UIactivetable X Y TEXTSIZE [ "NAME" [ children ] [ action ] .. ] COLUMNS "tooltip"
UIactivetable = [
	uigrid $arg5 0 0 [
		UIsettip $arg6
		looplist3 n c a $arg4 [
			if (=s $n "") uifill [
				UIbutton "hold2" [
					c ; uitext $n $arg3
				] $arg1 $arg2 $a -1
			]
		]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #5  box, buttonarea & button                                                                            //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIbox [ style(s) ] X Y [ children ]
UIbox = [
	uitarget $arg2 $arg3 [
		if (=s $arg1 "") [
			style_generic_default
		] [ doargs [style_generic_@arg1] ]
		uiclamp*e
		doargs $arg4
	]
]

// UIbuttonarea [ style(s) ] X Y [ children ]
UIbuttonarea = [
	uitarget $arg2 $arg3 [
		UIhoversound
		if (=s $arg1 "") [
			style_button_default
		] [ doargs [style_button_@arg1] ]
		uiclamp*e
		doargs $arg4
	]
]

// UIbutton [ style(s) ] [ button-children ] X Y [ on-release ] ROTATION [ children ] (USE-PADDING)
UIbutton = [
	if (< $numargs 8) [ arg8 = $.UI_pad_L ]
	if $arg3 [] [ arg3 = $.UI_pad_5XL ]
	if $arg4 [] [ arg4 = $.UI_pad_5XL ]
	uitarget $arg3 $arg4 [
		UIhoversound
		doargs $arg7
		if (=s $arg1 "") [
			style_button_default
		] [ doargs [style_button_@arg1] ]
		uirelease [ doargs $arg5 ]
		uiclamp*e
		uispace $arg8 0 [
			uiclamp.x
			uihlist $.UI_pad_L [
				uialign $arg6 0
				doargs $arg2
			]
		]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #6  scrollbars, (slim/bar)sliders, (color/spectrum)sliders & optionslider                               //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIvscroll X Y SCROLLSPEED
UIvscroll = [
	if $arg1 [] [ arg1 = $.UI_pad_3XL ]
	arg4 = (*f $arg1 0.35) // arrow size
	if (< $numargs 3) [ arg3 = (*f $arg2 2) ]
	uivlist 0 [
		uiscrollarrow (-f 0 $arg3)
		UIbar 1
		uivscrollbar [
			uifill $arg1 $arg2 [ UIbar 0 1 ]
			uiscrollbutton [
				UIhoversound
				style_button_hold5
				uiclamp*e
				uispace 0 $arg4 [
					uiclamp.y
					style_generic_linesh 3 $.UI_pad_MM (*f $arg1 0.5)
					UItriangle $c_line1 $arg4 $arg4   0 ; uialign- 0 -1
					UItriangle $c_line1 $arg4 $arg4 180 ; uialign- 0  1
				]
			]
			uiclamp-x
		]
		UIbar 1
		uiscrollarrow $arg3
	]
]

// UIvscroll X Y SCROLLSPEED
UIhscroll = [
	if $arg2 [] [ arg2 = $.UI_pad_3XL ]
	arg4 = (*f $arg2 0.35) // arrow size
	if (< $numargs 3) [ arg3 = (*f $arg1 2) ]
	uihlist 0 [
		uiscrollarrow $arg3
		UIbar 0 1
		uihscrollbar [
			uifill $arg1 $arg2 [ UIbar 1 ]
			uiscrollbutton [
				UIhoversound
				style_button_hold1
				uiclamp*e
				uispace $arg4 0 [
					uiclamp.x
					style_generic_linesv 3 $.UI_pad_MM (*f $arg2 0.5)
					UItriangle $c_line1 $arg4 $arg4  90 ; uialign- -1
					UItriangle $c_line1 $arg4 $arg4 270 ; uialign-  1
				]
			]
			uiclamp-y
		]
		UIbar 0 1
		uiscrollarrow (-f 0 $arg3)
	]
]

// UIvslider VAR MIN MAX STEP X Y [ children ] [ on-change ]
UIvslider = [
	arg9 = (*f $arg5 0.35)
	uivlist 0 [
		uisliderarrow -1 [
			UIbuttonarea "hold6" (*f $arg5 1.5) $arg5 [
				UItriangle @(uihover? 0 $c_line1) $arg9 $arg9 0
				UItriangle @(uihover? 0 $c_line1) $arg9 (divf $arg9 2) 180
			]
		]
		uivslider $arg1 (minf $arg3 $arg2) (maxf $arg2 $arg3) $arg4 $arg8 [
			UIhoversound
			UIbox "" (-f $arg6 (*f $arg5 3)) (*f 0.75 $arg5)
			uisliderbutton [
				uifill $arg5 $.UI_pad_XL
				style_button_hold5
				uiclamp*e
				if (< $numargs 10) [
					uispace $.UI_pad_L 0 arg7
				] arg7
			]
		]
		uisliderarrow 1 [
			UIbuttonarea "hold6" (*f $arg5 1.5) $arg5 [
				UItriangle @(uihover? 0 $c_line1) $arg9 (divf $arg9 2) 0
				UItriangle @(uihover? 0 $c_line1) $arg9 $arg9 180
			]
		]
	]
]

// UIhslider VAR MIN MAX STEP X Y [ children ] [ on-change ]
UIhslider = [
	arg9 = (*f $arg6 0.35)
	uihlist 0 [
		uisliderarrow -1 [
			UIbuttonarea "hold2" (*f $arg6 1.5) $arg6 [
				UItriangle @(uihover? 0 $c_line1) $arg9 $arg9 90
				UItriangle @(uihover? 0 $c_line1) $arg9 (divf $arg9 2) 270
			]
		]
		uihslider $arg1 $arg2 $arg3 $arg4 $arg8 [
			UIhoversound
			UIbox "" (-f $arg5 (*f $arg6 3)) (*f 0.75 $arg6)
			uisliderbutton [
				uifill $.UI_pad_XL $arg6
				style_button_hold1
				uiclamp*e
				if (< $numargs 10) [
					uispace $.UI_pad_L 0 arg7
				] arg7
			]
		]
		uisliderarrow 1 [
			UIbuttonarea "hold2" (*f $arg6 1.5) $arg6 [
				UItriangle @(uihover? 0 $c_line1) $arg9 (divf $arg9 2) 90
				UItriangle @(uihover? 0 $c_line1) $arg9 $arg9 270
			]
		]
	]
]
// UIhslider VAR MIN MAX STEP X Y [ children ] [ on-change ]
UIhslider = [
	arg9 = (*f $arg6 0.35)
	uihlist 0 [
		uisliderarrow -1 [
			UIbuttonarea "hold2" (*f $arg6 1.5) $arg6 [
				UItriangle @(uihover? 0 $c_line1) $arg9 $arg9 90
			]
		]
		uihslider $arg1 $arg2 $arg3 $arg4 $arg8 [
			UIhoversound
			UIbox "" (-f $arg5 (*f $arg6 3)) (*f 0.75 $arg6)
			uisliderbutton [
				uifill $.UI_pad_XL $arg6
				style_button_hold1
				uiclamp*e
				if (< $numargs 10) [
					uispace $.UI_pad_L 0 arg7
				] arg7
			]
		]
		uisliderarrow 1 [
			UIbuttonarea "hold2" (*f $arg6 1.5) $arg6 [
				UItriangle @(uihover? 0 $c_line1) $arg9 $arg9 270
			]
		]
	]
]

// UIvsliderslim VAR MIN MAX STEP X Y [ on-change ] [ label formatting ] [ pulse trigger cond ]
UIvsliderslim = [
	if $arg5 [] [ arg5 = $.UI_pad_5XL ]
	if $arg6 [] [ arg6 = $.UI_pad_5XL ]
	if $arg8 [ arg8 = (do $arg8) ] [ arg8 = $$arg1 ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg5 $arg6 [
		UIhoversound
		uispace $.UI_pad_MM 0 [
			style_generic_box $c_main1 n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace 0 $.UI_pad_L [
			uivslider $arg1 $arg2 $arg3 $arg4 [ doargs $arg7 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-x
				]
				uiclamp-x
			]
			uiclamp-e
			uifont "default_outline" [
				uivlist (*f $.UI_pad_M -1) [ loop i (strlen $arg8) [
					uicolortext (substr $arg8 $i 1) (? $arg9 0xA0FFFFFF 0x60FFFFFF) 0.65
				] ]
			]

		]
		uiclamp*e
	]
]

// UIhsliderslim VAR MIN MAX STEP X Y [ on-change ] [ label formatting ] [ pulse trigger cond ]
UIhsliderslim = [
	if $arg5 [] [ arg5 = $.UI_pad_5XL ]
	if $arg6 [] [ arg6 = $.UI_pad_5XL ]
	if $arg8 [ arg8 = (do $arg8) ] [ arg8 = $$arg1 ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg5 $arg6 [
		UIhoversound
		uispace 0 $.UI_pad_MM [
			style_generic_box $c_main1 n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace $.UI_pad_L 0 [
			uihslider $arg1 $arg2 $arg3 $arg4 [ doargs $arg7 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-y
				]
				uiclamp-y
			]
			uiclamp-e
			uifont "default_outline" [ uicolortext $arg8 (? $arg9 0xA0FFFFFF 0x60FFFFFF) 0.65 ]
		]
		uiclamp*e
	]
]

// UIvcolorslider VAR MIN MAX 0xCOLOR1 0xCOLOR2 X Y [ on-change ] [ pulse trigger cond ]
UIvcolorslider = [
	if $arg6 [] [ arg6 = $.UI_pad_5XL ]
	if $arg7 [] [ arg7 = $.UI_pad_5XL ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg6 $arg7 [
		UIhoversound
		uispace $.UI_pad_MM 0 [
			uivgradient $arg4 $arg5
			style_generic_box n n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace 0 $.UI_pad_L [
			uivslider $arg1 $arg2 $arg3 1 [ doargs $arg8 ] [
				uisliderbutton [
					if (<= $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-x
				]
				uiclamp-x
			]
			uiclamp-e
			uifont "wide_outline" [ uivlist (*f $.UI_pad_M -1) [
				loop i (strlen $$arg1) [
					uicolortext (substr $$arg1 $i 1) (? $arg9 0xA0FFFFFF 0x60FFFFFF) 0.7
				]
			] ]
		]
		uiclamp*e
	]
]

// UIhcolorslider VAR MIN MAX 0xCOLOR1 0xCOLOR2 X Y [ on-change ] [ pulse trigger cond ]
UIhcolorslider = [
	if $arg6 [] [ arg6 = $.UI_pad_5XL ]
	if $arg7 [] [ arg7 = $.UI_pad_5XL ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg6 $arg7 [
		UIhoversound
		uispace 0 $.UI_pad_MM [
			uihgradient $arg4 $arg5
			style_generic_box n n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace $.UI_pad_L 0 [
			uihslider $arg1 $arg2 $arg3 1 [ doargs $arg8 ] [
				uisliderbutton [
					if (<= $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-y
				]
				uiclamp-y
			]
			uiclamp-e
			uifont "wide_outline" [ uicolortext $$arg1 (? $arg9 0xA0FFFFFF 0x60FFFFFF) 0.7 ]
		]
		uiclamp*e
	]
]

// UIvspectrumslider VAR MIN MAX X Y [ on-change ] [ pulse trigger cond ]
UIvspectrumslider = [
	if $arg4 [] [ arg4 = $.UI_pad_5XL ]
	if $arg5 [] [ arg5 = $.UI_pad_5XL ]
	if $arg7 [ arg7 = (do $arg7) ] [ arg7 = (|| uihover+? uihold+?) ]
	uitarget $arg4 $arg5 [
		UIhoversound
		uispace $.UI_pad_MM 0 [
			uivlist 0 [
				looplist2 c1 c2 [
					0xFF0000 0xFFFF00
					0xFFFF00 0x00FF00
					0x00FF00 0x00FFFF
					0x00FFFF 0x0000FF
					0x0000FF 0xFF00FF
					0xFF00FF 0xFF0000
				] [ uivgradient $c1 $c2 ]
				uiclamp*e
			]
			style_generic_box n n n d (? $arg7 p d)
			uiclamp*e
		]
		uispace 0 $.UI_pad_L [
			uivslider $arg1 $arg2 $arg3 1 [ doargs $arg6 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-x
				]
				uiclamp-x
			]
			uiclamp-e
		]
		uiclamp*e
	]
]

// UIhspectrumslider VAR MIN MAX X Y [ on-change ] [ pulse trigger cond ]
UIhspectrumslider = [
	if $arg4 [] [ arg4 = $.UI_pad_5XL ]
	if $arg5 [] [ arg5 = $.UI_pad_5XL ]
	if $arg7 [ arg7 = (do $arg7) ] [ arg7 = (|| uihover+? uihold+?) ]
	uitarget $arg4 $arg5 [
		UIhoversound
		uispace 0 $.UI_pad_MM [
			uihlist 0 [
				looplist2 c1 c2 [
					0xFF0000 0xFFFF00
					0xFFFF00 0x00FF00
					0x00FF00 0x00FFFF
					0x00FFFF 0x0000FF
					0x0000FF 0xFF00FF
					0xFF00FF 0xFF0000
				] [ uihgradient $c1 $c2 ]
				uiclamp*e
			]
			style_generic_box n n n d (? $arg7 p d)
			uiclamp*e
		]
		uispace $.UI_pad_L 0 [
			uihslider $arg1 $arg2 $arg3 1 [ doargs $arg6 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-y
				]
				uiclamp-y
			]
			uiclamp-e
		]
		uiclamp*e
	]
]

// UIhbarslider VAR MIN MAX STEP X Y [ on-change ] [ pulse trigger cond ]
UIhbarslider = [
	if (> $arg2 $arg3) [ // swap MIN/MAX around if they're the wrong way around.
		arg9 = $arg2
		arg2 = (+ $arg3 0) // ensure MIN is int
		arg3 = (+ $arg9 0) // ensure MAX is int
	]
	arg4 = (abs $arg4) // ensure STEP is positive int
	if $arg8 [ arg8 = (do $arg8) ] [ arg8 = (|| uihover+? uihold+?) ]
	
	local bar.max bar.idx bar.act
	bar.max = (+ (abs (div (- $arg2 $arg3) $arg4)) 1)
	bar.max = (divf (-f $arg5 $.UI_pad_XL (*f (- $bar.max 1) $.UI_pad_MS)) $bar.max)
	bar.idx = (div (- $$arg1 $arg2) $arg4)

	uigroup [
		UIhoversound
		uihslider $arg1 $arg2 $arg3 $arg4 $arg7 [
			uifill (*f 0.97 (-f $arg5 $bar.max)) $arg6
			uisliderbutton [
				if (<= $arg2 $$arg1 $arg3) [ uifill ]
				uiclamp-y
			]
			uiclamp-y
		]
		arg6 = (*f 0.75 $arg6)
		uifill $arg5 $arg6 [
			style_generic_box d d d d (? $arg8 p d)
			uiclamp*e
			uispace $.UI_pad_S 0 [
				uihlist $.UI_pad_MS [
					loop n (max (+ $bar.idx 1) 0) [
						bar.act = (= $n $bar.idx)
						if $.UI_useimg [
							uistretchedimage (
								concatword "media/interface/ui/ui_bar" $bar.act ".png"
							) $.UI_pad_ML $.UI_pad_ML [ uifill $bar.max (-f $arg6 $.UI_pad_XL) ]
						] [
							uicolor (? $bar.act $c_cb1 $c_cb0) $bar.max (-f $arg6 $.UI_pad_XL) [
								style_generic_gradient2
								uioutline (? $bar.act $c_cb1 $c_line1)
								uiclamp*e
							]
						]
					]
				]
			]
			uialign- -1
		]
	]
]

// UIoptionslider VAR [ Value Name Color . . . ] X Y (CONDITION) [ on-change ] [ children ]
UIoptionslider = [
	// prep-work
	local curr.idx z x
	curr.idx = (indexof $arg2 $$arg1)
	z = (*f $arg4 0.3)
	x = (ceil (divf (listlen $arg2) 3))
	x = (divf (-f $arg3 (*f $arg4 2) (*f $.UI_pad_L (+ $x 1))) $x)
	if (< $numargs 5) [ arg5 = 1 ]

	uihlist $.UI_pad_L [
		UIbuttonarea "hold2" $arg4 $arg4 [
			if $.UI_useimg [ UIfastimg "ui/" "arrow_l" $uihover? ; uiclamp-e ] [
				UItriangle (uihover? 0 $c_line1) $z $z 90
			]
			uirelease [ $arg1 = (at $arg2 (max 0 (- $curr.idx 3))) ; arg6 ]
		]
		uivlist 0 [
			uifont "wide" [
				if (> $curr.idx -1) [
					uicolortext (at $arg2 (+ $curr.idx 1)) (
						if $arg5 [ doargs (at $arg2 (+ $curr.idx 2)) ] [ result $c_gray ]
					) 0.5
				] [ uicolortext "CUSTOM" (? $arg5 $c_gray_l $c_gray) 0.5 ]
			]
			uihlist $.UI_pad_L [
				looplist3 v n c $arg2 [
					uicolor (? (= $$arg1 $v) (? $arg5 $c_cb1 $c_gray_l) $c_cb0) $x $.UI_pad_MS [
						style_generic_gradient2
						uioutline (? (= $$arg1 $v) (? $arg5 $c_cb1 $c_gray_l) $c_cb0)
						uiclamp*e
					]
				]
			]
			uifill 0 0.002
		]
		UIbuttonarea "hold2" $arg4 $arg4 [
			if $.UI_useimg [ UIfastimg "ui/" "arrow_r" $uihover? ; uiclamp-e ] [
				UItriangle (uihover? 0 $c_line1) $z $z 270
			]
			uirelease [ $arg1 = (at $arg2 (min (- (listlen $arg2) 3) (+ $curr.idx 3))) ; arg6 ]
		]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #7  HUD: hudcell, hudcellslider, entcell, entcolor12/24                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIhudcell X Y [ children ] X-spacing Y-spacing
UIhudcell = [
	if (< $numargs 4) [ arg4 = $.UI_pad_L ]
	if (< $numargs 5) [ arg5 = $.UI_pad_L ]
	uitarget $arg1 $arg2 [
		style_generic_box $c_diag1 d n d n
		uiclamp*e
		uispace $arg4 $arg5 [
			uiclamp.e
			doargs $arg3
		]
	]
]

// UIentcell KEY[S] Y-spacing [ children ] TITLE
UIentcell = [
	local x active
	x = (listlen $arg1)
	x = (+f (*f $x $.UI_pad_D3XL) (*f (- $x 1) $.UI_pad_L))
	active = (|| [||iskeyheld @arg1] $uihover+?)
	uitarget $x (*f $.UI_pad_5XL 4) [
		if $active [ style_generic_box $c_diag2 d n d p ] [ style_generic_box $c_diag1 d n d n ]
		uiclamp*e
		uispace $.UI_pad_L $.UI_pad_L [
			uiclamp.e
			uivlist $arg2 [
				uialign -2 -1
				uiclamp.x
				if (&& [> $numargs 3]) [
					uihlist 0 [
						uitarget (-f $.UI_pad_D3XL $.UI_pad_5XL $.UI_pad_3XL) (-f $.UI_pad_5XL $.UI_pad_S) [
							style_generic_box $c_diag1 n n d (? $active p n)
							uiclamp*e
							uitext $arg4 0.55
						]
						UIkeybox $.UI_pad_5XL $.UI_pad_5XL [ uitext $arg1 0.5 ] (? $active $c_cb1)
					]
				]
				doargs $arg3
			]
		]
	]
]

// UIhudcellslider VAR MIN MAX STEP ENTATTR#
UIhudcellslider = [
	UIhsliderslim $arg1 $arg2 $arg3 $arg4 (-f $.UI_pad_D3XL $.UI_pad_4XL) $.UI_pad_5XL [
		entattr $arg5 $$arg1
	]
]


UIentcolor12 = [
	local c1 c2 c3 color12 color24
	color12 = (& (entattr $arg1) 0xFFF)
	c1 =    (>> $color12 0x8)
	c2 = (& (>> $color12 0x4) 0xF)
	c3 = (&     $color12      0xF)
	color24 = (| (<< $c1 0x14) (<< $c2 0xC) (<< $c3 0x4) 0x0F0F0F)
	UIhcolorslider c1 0 15 (& $color24 0x00FFFF) (| $color24 0xFF0000) 0.18 0.036 [ entattr $arg1 (| (<< $c1 0x8) (& $color12 0x0FF)) ]
	UIhcolorslider c2 0 15 (& $color24 0xFF00FF) (| $color24 0x00FF00) 0.18 0.036 [ entattr $arg1 (| (<< $c2 0x4) (& $color12 0xF0F)) ]
	UIhcolorslider c3 0 15 (& $color24 0xFFFF00) (| $color24 0x0000FF) 0.18 0.036 [ entattr $arg1 (|     $c3      (& $color12 0xFF0)) ]
]


UIentcolor24 = [
	local c1 c2 c3 color24
	loop+ i 1 3 [ [c@i] = (& $[ea@i] 0xFF) ]
	color24 = (| (<< $c1 0x10) (<< $c2 0x8) $c3)
	UIhcolorslider c1 0 255 (& $color24 0x00FFFF) (| $color24 0xFF0000) 0.60 0.036 [ entattr 1 $c1 ]
	UIhcolorslider c2 0 255 (& $color24 0xFF00FF) (| $color24 0x00FF00) 0.60 0.036 [ entattr 2 $c2 ]
	UIhcolorslider c3 0 255 (& $color24 0xFFFF00) (| $color24 0x0000FF) 0.60 0.036 [ entattr 3 $c3 ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #8  KB HOOK: UIcaret, advfieldLA/RA/CA, helper funcs KBclean & KBinput                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


UIcaret = [
	if (< (abs (mod (- $getmillis $.UI_KBmillis) 700)) 400) [
		uispace 0 $.UI_pad_ML [
			uiclamp.y
			uialign -1
			uioffset (-f 0 $.UI_pad_MS) 0 [
				uiclamp.y
				uiline $c_baige
				uiclamp-y
				uiline $c_baige $.UI_pad_S
				uialign- 0 -1
				uiline $c_baige $.UI_pad_S
				uialign- 0  1
			]
		]
	]
]

UInumcaret = [
	if (< (abs (mod (- $getmillis $.UI_KBmillis) 700)) 400) [
		uispace 0 $.UI_pad_ML [
			uiclamp.y
			uialign -1
			uiline $c_baige
			uiclamp-y
			uialign- -1
			uiline $c_baige $.UI_pad_S
			uialign-  0 -1
			uiline $c_baige $.UI_pad_S
			uialign-  0  1
		]
	]
]

// UIadvfieldLA VAR STRLEN TEXTSIZE TYPE [ on-change ] [ on-finish ] X Y [ children ] [ blank-field children ]
UIadvfieldLA = [
	if $arg7 [] [ arg7 = $.UI_pad_SXL ]
	if $arg8 [] [ arg8 = $.UI_pad_5XL ]

	local len caret this char
	len   = (strlen $$arg1)           // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_red n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
			uipress [ .UI_KBcaret = $len ]
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarlen = $arg2
				.UI_KBdict   = $arg4
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = $len
			]
		]
		doargs $arg9
		
		if (? $this 1 $len) [
			uihlist 0 [
				uiclamp.y
				uialign -1
				uitarget 0 0 [
					uitext " " $arg3
					uipress [ .UI_KBcaret = 0 ]
				]
				loop n $len [
					uifill 0 0 [
						uihlist 0 [
							uiclamp.e
							uitarget 0 0 [ uipress [ .UI_KBcaret =    $n    ] ]
							uitarget 0 0 [ uipress [ .UI_KBcaret = (+ $n 1) ] ]
							uiclamp*e
						]
						if (= $caret $n) [ UIcaret ]
						char = (substr $$arg1 $n 1)
						if (=s $char " ") [ uicolortext "_" $c_line1 $arg3 ]
						uitext $char $arg3
					]
				]
				uifill 0 0 [
					if (>= $caret $len) [ UIcaret ]
					uitext " " $arg3
				]
				uiclamp*y
			]
		] [ doargs $arg10 ]
	]
]

// UIadvfieldRA VAR STRLEN TEXTSIZE TYPE [ on-change ] [ on-finish ] X Y [ children ] [ blank-field children ]
UIadvfieldRA = [
	if $arg7 [] [ arg7 = $.UI_pad_SXL ]
	if $arg8 [] [ arg8 = $.UI_pad_5XL ]

	local len caret this char
	len   = (strlen $$arg1)           // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_red n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
			uipress [ .UI_KBcaret = 0 ]
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarlen = $arg2
				.UI_KBdict   = $arg4
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = 0
			]
		]
		doargs $arg9
		
		if (? $this 1 $len) [
			uihlist 0 [
				uiclamp.y
				uialign 1
				uifill 0 0 [ uitext " " $arg3 ]
				loop n $len [
					uifill 0 0 [
						uihlist 0 [
							uiclamp.e
							uitarget 0 0 [ uipress [ .UI_KBcaret =    $n    ] ]
							uitarget 0 0 [ uipress [ .UI_KBcaret = (+ $n 1) ] ]
							uiclamp*e
						]
						if (= $caret $n) [ UIcaret ]
						char = (substr $$arg1 $n 1)
						if (=s $char " ") [ uicolortext "_" $c_line1 $arg3 ]
						uitext $char $arg3
					]
				]
				uitarget 0 0 [
					if (>= $caret $len) [ UIcaret ]
					uitext " " $arg3
					uipress [ .UI_KBcaret = $len ]
				]
				uiclamp*y
			]
		] [ doargs $arg10 ]
	]
]

// UIadvfieldCA VAR STRLEN TEXTSIZE TYPE [ on-change ] [ on-finish ] X Y [ children ] [ blank-field children ]
UIadvfieldCA = [
	if $arg7 [] [ arg7 = $.UI_pad_SXL ]
	if $arg8 [] [ arg8 = $.UI_pad_5XL ]

	local len caret this char
	len   = (strlen $$arg1)           // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_red n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarlen = $arg2
				.UI_KBdict   = $arg4
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = 0
			]
		]
		doargs $arg9
		
		if (? $this 1 $len) [
			uihlist 0 [
				uiclamp.e
				uitarget 0 0 [ uipress [ .UI_KBcaret = 0    ] ]
				uitarget 0 0 [ uipress [ .UI_KBcaret = $len ] ]
				uiclamp*e
			]
			uihlist 0 [
				uiclamp.y
				uifill 0 0 [ uitext " " $arg3 ]
				loop n $len [
					uifill 0 0 [
						uihlist 0 [
							uiclamp.e
							uitarget 0 0 [ uipress [ .UI_KBcaret =    $n    ] ]
							uitarget 0 0 [ uipress [ .UI_KBcaret = (+ $n 1) ] ]
							uiclamp*e
						]
						if (= $caret $n) [ UIcaret ]
						char = (substr $$arg1 $n 1)
						if (=s $char " ") [ uicolortext "_" $c_line1 $arg3 ]
						uitext $char $arg3
					]
				]
				uifill 0 0 [
					if (>= $caret $len) [ UIcaret ]
					uitext " " $arg3
				]
				uiclamp*y
			]
		] [ doargs $arg10 ]
	]
]

// UIadvfieldRAint VAR MIN MAX TEXTSIZE [ on-change ] [ on-finish ] X Y [ children ]
UIadvfieldRAint = [
	if $arg7 [] [ arg7 = $.UI_pad_SXL ]
	if $arg8 [] [ arg8 = $.UI_pad_5XL ]
	if (< $arg3 $arg2) [
		arg10 = $arg2
		arg2  = $arg3
		arg3  = $arg10
	] // ensure MIN is always less than MAX

	local y neg len caret this
	btn.y = (-f $arg8 $.UI_pad_XL)
	neg   = (< $$arg1 0)
	len   = (strlen (max (abs $arg2) (abs $arg3)))  // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_gray_l n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
			if (&& $.UI_KBhover $uipress?) [ .UI_KBcaret = $neg ]
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarmin = $arg2
				.UI_KBvarmax = $arg3
				.UI_KBvar0x  = (&& [< $.UI_KBvarmin 0] [>= $.UI_KBvarmax 0])
				.UI_KBvarlen = $len
				.UI_KBdict   = "int"
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = $neg
			]
		]
		doargs $arg9
		
		uihlist 0 [
			uialign -1
			uifill $.UI_pad_S
			if $.UI_KBvar0x [
				UIbuttonarea "hold2" $btn.y $btn.y [
					uifont "wide" [ uitext (? $neg "-" "+") $arg4 ]
					uipress [ .UI_KBinput "MINUS" ]
				]
			] [ uifill $btn.y $btn.y [ uifont "wide" [ uitext (? $neg "-" "+") $arg4 ] ] ]
		]
		uihlist 0 [
			uiclamp.y
			uialign 1
			if $this [ .UI_KBhover = (! $uihover?) ]
			uifill 0 0 [ uitext "   " $arg4 ]
			loop+ n $neg $len [
				uitarget 0 0 [
					uiclamp.y
					uipress [ .UI_KBcaret = $n ]
					char = (- $n (- $len (strlen (abs $$arg1))))
					uifont "mono" [
						if (< $char $neg) [
							uicolortext "_" (? (= $caret $n) $c_cyan_t $c_line2) $arg4
						] [ uitext (substr $$arg1 $char 1) $arg4 ]
					]
					if (= $caret $n) [ UInumcaret ]
				]
			]
			uitarget 0 0 [
				uitext " " $arg4
				uipress [ .UI_KBcaret = (- $len (! $neg)) ]
			]
			uiclamp*y
		]
	]
]

.UI_KBclean = [
	do $.UI_KBvarend
	.UI_KBdict   = ""
	.UI_KBvarcur = ""
	.UI_KBvarmod = ""
	.UI_KBvarend = ""
	.UI_KBthisui = ""
	.UI_KBvarlen =  1
	.UI_KBvarmin =  0
	.UI_KBvarmax =  0
	.UI_KBvardot =  0
	.UI_KBcaret  = -1
	// unknown why sleep is required to work right
	sleep 250 [ .UI_KBisoob = 0 ]
	//.UI_KBisoob = 0
]

.UI_KBinput = [
	if (> (indexof "ESCAPE RETURN KP_ENTER" $arg1) -1) [ .UI_KBclean ] [
		cases $.UI_KBdict "int" [
			arg2 = (< $$.UI_KBvarcur 0)
			cases $arg1 "DELETE" [
				if (< $.UI_KBcaret (strlen $$.UI_KBvarcur)) [
					set $.UI_KBvarcur (strsplice $$.UI_KBvarcur "" $.UI_KBcaret 1)
					set $.UI_KBvarcur (clamp $$.UI_KBvarcur $.UI_KBvarmin $.UI_KBvarmax)
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] "BACKSPACE" [
				if (iskeyheld "LCTRL") [
					set $.UI_KBvarcur (clamp 0 $.UI_KBvarmin $.UI_KBvarmax)
					.UI_KBcaret  = $arg2
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				] [
					if (> $.UI_KBcaret $arg2) [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur "" (- $.UI_KBcaret 1) 1)
						set $.UI_KBvarcur (clamp $$.UI_KBvarcur $.UI_KBvarmin $.UI_KBvarmax)
						.UI_KBcaret  = (- $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				]
			] "LEFT" [
				if (iskeyheld "LCTRL") [
					if $$.UI_KBvarcur [
						set $.UI_KBvarcur (clamp (* $$.UI_KBvarcur 10) $.UI_KBvarmin $.UI_KBvarmax)
						.UI_KBmillis = $getmillis
					]
				] [
					.UI_KBcaret  = (max (- $.UI_KBcaret 1) (< $$.UI_KBvarcur 0))
					.UI_KBmillis = $getmillis
				]
			] "RIGHT" [
				if (iskeyheld "LCTRL") [
					if $$.UI_KBvarcur [
						arg3 = (div $$.UI_KBvarcur 10)
						if (&& [< $$.UI_KBvarcur 0] [>= $arg3 0]) [ .UI_KBcaret = (- $.UI_KBcaret 1) ]
						set $.UI_KBvarcur (clamp $arg3 $.UI_KBvarmin $.UI_KBvarmax)
						.UI_KBmillis = $getmillis
					]
				] [ 
					.UI_KBcaret  = (min (+ $.UI_KBcaret 1) (- $.UI_KBvarlen (>= $$.UI_KBvarcur 0)))
					.UI_KBmillis = $getmillis
				]
			] "UP" [
				if (iskeyheld "LCTRL") [
					if (&& [>= $.UI_KBvarmax 0] [< $$.UI_KBvarcur 0]) [
						.UI_KBcaret = (- $.UI_KBcaret 1)
					]
					set $.UI_KBvarcur $.UI_KBvarmax
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				] [
					if (< $$.UI_KBvarcur $.UI_KBvarmax) [
						arg3 = (>= $$.UI_KBvarcur 0)
						arg3 = (pow 10 (- $.UI_KBvarlen $.UI_KBcaret $arg3))
						arg3 = (+ $$.UI_KBvarcur $arg3)
						if (< $$.UI_KBvarcur 0 $arg3) [
							set $.UI_KBvarcur (clamp (* $$.UI_KBvarcur -1) $.UI_KBvarmin $.UI_KBvarmax)
							.UI_KBcaret = (- $.UI_KBcaret 1)
						] [
							if $arg3 [] [ .UI_KBcaret = (- $.UI_KBcaret 1) ]
							set $.UI_KBvarcur (clamp $arg3 $.UI_KBvarmin $.UI_KBvarmax)
						]
						do $.UI_KBvarmod
					]
					.UI_KBmillis = $getmillis
				]
			] "DOWN" [
				if (iskeyheld "LCTRL") [
					if (&& [< $.UI_KBvarmin 0] [>= $$.UI_KBvarcur 0]) [
						.UI_KBcaret = (+ $.UI_KBcaret 1)
					]
					set $.UI_KBvarcur $.UI_KBvarmin
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				] [
					if (> $$.UI_KBvarcur $.UI_KBvarmin) [
						arg3 = (>= $$.UI_KBvarcur 0)
						arg3 = (pow 10 (- $.UI_KBvarlen $.UI_KBcaret $arg3))
						arg3 = (+ $$.UI_KBvarcur (- 0 $arg3))
						if (< $arg3 0 $$.UI_KBvarcur) [
							set $.UI_KBvarcur (clamp (- 0 $$.UI_KBvarcur) $.UI_KBvarmin $.UI_KBvarmax)
							.UI_KBcaret = (+ $.UI_KBcaret 1)
						] [
							if $$.UI_KBvarcur [] [ .UI_KBcaret = (+ $.UI_KBcaret 1) ]
							set $.UI_KBvarcur (clamp $arg3 $.UI_KBvarmin $.UI_KBvarmax)
						]
						do $.UI_KBvarmod
					]
					.UI_KBmillis = $getmillis
				]
			] "MINUS" [
				if (&& $$.UI_KBvarcur $.UI_KBvar0x) [
					set $.UI_KBvarcur (clamp (* $$.UI_KBvarcur -1) $.UI_KBvarmin $.UI_KBvarmax)
					.UI_KBcaret = (- $.UI_KBcaret (? (< $$.UI_KBvarcur 0) -1 1))
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] () [
				if (> (indexof "0 1 2 3 4 5 6 7 8 9" $arg1) -1) [
					if (||iskeyheld "LSHIFT" "RSHIFT") [] [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur $arg1 $.UI_KBcaret 0)
						.UI_KBcaret  = (+ $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				] [
					arg3 = (indexof "KP0 KP1 KP2 KP3 KP4 KP5 KP6 KP7 KP8 KP9" $arg1)
					if (> $arg3 -1) [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur $arg3 $.UI_KBcaret 0)
						.UI_KBcaret  = (+ $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				]
			]
		] "float" [
			cond (> (indexof "0 1 2 3 4 5 6 7 8 9" $arg1) -1) [
				if (||iskeyheld "LSHIFT" "RSHIFT") [] [
					set $.UI_KBvarcur (strsplice $$.UI_KBvarcur $arg1 $.UI_KBcaret 0)
					.UI_KBcaret  = (+ $.UI_KBcaret 1)
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			]
		] () [
			cases $arg1 "DELETE" [
				if (< $.UI_KBcaret (strlen $$.UI_KBvarcur)) [
					set $.UI_KBvarcur (strsplice $$.UI_KBvarcur "" $.UI_KBcaret 1)
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] "BACKSPACE" [
				if (iskeyheld "LCTRL") [
					set $.UI_KBvarcur ""
					.UI_KBcaret  = 0
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				] [
					if (> $.UI_KBcaret 0) [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur "" (- $.UI_KBcaret 1) 1)
						.UI_KBcaret  = (max (- $.UI_KBcaret 1) 0)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				]
			] "LEFT" [
				.UI_KBcaret  = (max (- $.UI_KBcaret 1) 0)
				.UI_KBmillis = $getmillis
			] "RIGHT" [
				.UI_KBcaret  = (min (+ $.UI_KBcaret 1) (strlen $$.UI_KBvarcur))
				.UI_KBmillis = $getmillis
			] "UP" [
				.UI_KBcaret  = 0
				.UI_KBmillis = $getmillis
			] "DOWN" [
				.UI_KBcaret  = (strlen $$.UI_KBvarcur)
				.UI_KBmillis = $getmillis
			] () [
				if (< (strlen $$.UI_KBvarcur) $.UI_KBvarlen) [
					cond [&& [!=s $.UI_KBdict "name"] [=s $arg1 "SPACE"]] [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur " " $.UI_KBcaret 0)
						.UI_KBcaret  = (+ $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					] [> (indexof "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" $arg1) -1] [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (
							if (||iskeyheld "LSHIFT" "RSHIFT") [ result $arg1 ] [ strlower $arg1 ]
						) $.UI_KBcaret 0)
						.UI_KBcaret  = (+ $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					] [> (indexof "0 1 2 3 4 5 6 7 8 9" $arg1) -1] [
						if (||iskeyheld "LSHIFT" "RSHIFT") [
							set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (at [
									")" ! "@" # $ % "^^" & * "("
							] $arg1) $.UI_KBcaret 0)
						] [ set $.UI_KBvarcur (strsplice $$.UI_KBvarcur $arg1 $.UI_KBcaret 0) ]
						.UI_KBcaret  = (+ $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					] [
						arg3 = (indexof [
							"BACKQUOTE" "MINUS" "EQUALS" "LEFTBRACKET" "RIGHTBRACKET"
							"BACKSLASH" "SEMICOLON" "QUOTE" "COMMA" "PERIOD" "SLASH"
						] $arg1) // remainder of symbol keys
						if (> $arg3 -1) [
							if (||iskeyheld "LSHIFT" "RSHIFT") [
								set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (at [
									~ _ + { } | : "^"" < > ?
								] $arg3) $.UI_KBcaret 0)
							] [
								set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (at [
									\ - = "[" "]" \ ";" ' , . /
								] $arg3) $.UI_KBcaret 0)
							]
							.UI_KBcaret  = (+ $.UI_KBcaret 1)
							.UI_KBmillis = $getmillis
							do $.UI_KBvarmod
						]
					]
				]
			]
		]
	]
]




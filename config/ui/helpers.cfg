
// CoSinusoidal Transition Functions
// arg1 : TIME INDEX  | The current point in time, modulated by the WAVELENGTH
// arg2 : WAVELENGTH  | Measured in millis, controls the length of a full cycle
// arg3 : Y FORMAT    | Adjusts the Y output to different formats as below:
//   -1 = Goes from 1 to -1 to 1 in a full cycle
//    0 = Goes from 1 to  0 to 1 in a full cycle
//    1 = Same as the previous, but goes negative every other cycle
// The `sinwave` version will have opposite values from `coswave`
coswave = [
	if $arg2 [
		local x y
		x = (modf (*f 180 (divf $arg1 $arg2)) 720)
		if (>= $arg3 0) [
			y = (+f 0.5 (*f 0.5 (cos $x)))
			if (&& $arg3 [<f 180 $x 540]) [ y = (*f $y -1) ]
			result $y
		] [ cos $x ]
	] [ result 1 ]
]

sinwave = [
	if $arg2 [
		local x y
		x = (modf (*f 180 (divf $arg1 $arg2)) 720)
		if (>= $arg3 0) [
			y = (+f 0.5 (*f 0.5 (sin $x)))
			if (&& $arg3 [<f 180 $x 540]) [ y = (*f $y -1) ]
			result $y
		] [ sin $x ]
	] [ result 0 ]
]

// cosbounce/sinbounce  VALUE  WAVELENGTH
// multiplies VALUE through the [-1] return value of a cos/sin wave function
// useful for making bouncing elements inside of UIs particularly
cosbounce = [ *f $arg1 (coswave (abs $getmillis) $arg2 -1) ]
sinbounce = [ *f $arg1 (sinwave (abs $getmillis) $arg2 -1) ]

// coswave.INT  INT:1  INT:2  rep-millis  custom-X  DOUBLERANGE
// NOT giving more than 3 parameters will have the script assume it's working within a UImenu.
coswave.INT = [
	if (>= $numargs 4) [
		arg4 = (coswave (abs (- $getmillis $arg4)) $arg3 $arg5)
	] [ arg4 = (UIcoswave $arg3) ]

	local r1 g1 b1 r2 g2 b2
	INT_to_RGB32 $arg1 [ r1 = $r ; g1 = $g ; b1 = $b ]
	INT_to_RGB32 $arg2 [ r2 = $r ; g2 = $g ; b2 = $b ]

	RGB32_to_INT 255 (
		round (+f $r2 (*f (- $r2 $r1) -1 $arg4))
	) (
		round (+f $g2 (*f (- $g2 $g1) -1 $arg4))
	) (
		round (+f $b2 (*f (- $b2 $b1) -1 $arg4))
	)
]

// coswave.RGB24  R:1 B:1 G:1  R:2 G:2 B:2  rep-millis  custom-X  DOUBLERANGE
// NOT giving more than 7 parameters will have the script assume it's working within a UImenu.
coswave.RGB24 = [
	if (>= $numargs 8) [
		arg8 = (coswave (abs (- $getmillis $arg8)) $arg7 $arg9)
	] [ arg8 = (UIcoswave $arg7) ]

	RGB32_to_INT 255 (
		round (+f $arg4 (*f (- $arg4 $arg1) -1 $arg8))
	) (
		round (+f $arg5 (*f (- $arg5 $arg2) -1 $arg8))
	) (
		round (+f $arg6 (*f (- $arg6 $arg3) -1 $arg8))
	)
]




// vdirdelta  DIR  ACTION   X  Y
// vdirdelta  ~~~  voffset  8  0
// DIR: 0 = NORTH, 1 = EAST, 2 = SOUTH, 3 = WEST
// meant to use camera yaw to transform vcommand coordinates for convenience
vdirdelta = [
	vdelta [
		if (> $getselface 3) [
			arg5 = (mod (div (+f $getcamyaw 45) 90) 4)
			case $arg5 0 [ // LOOKING NORTH
				case $arg1 0 [ // UP
					$arg2 0 (*f $arg4 -1)
				] 1 [          // RIGHT
					$arg2 (*f $arg3 -1)
				] 2 [          // DOWN
					$arg2 0 (*f $arg4 -1)
				] 3 [          // LEFT
					$arg2 (*f $arg3 -1)
				]
			] 1 [   // LOOKING EAST
				if (= $getselface 5) [
					arg3 = (*f $arg3 -1)
					arg4 = (*f $arg4 -1)
				]
				case $arg1 0 [ // UP
					$arg2 (*f $arg4 -1)
				] 1 [          // RIGHT
					$arg2 0 $arg3
				] 2 [          // DOWN
					$arg2 (*f $arg4 -1)
				] 3 [          // LEFT
					$arg2 0 $arg3
				]
			] 2 [   // LOOKING SOUTH
				case $arg1 0 [ // UP
					$arg2 0 $arg4
				] 1 [          // RIGHT
					$arg2 $arg3
				] 2 [          // DOWN
					$arg2 0 $arg4
				] 3 [          // LEFT
					$arg2 $arg3
				]
			] 3 [   // LOOKING WEST
				if (= $getselface 5) [
					arg3 = (*f $arg3 -1)
					arg4 = (*f $arg4 -1)
				]
				case $arg1 0 [ // UP
					$arg2 $arg4
				] 1 [          // RIGHT
					$arg2 0 (*f $arg3 -1)
				] 2 [          // DOWN
					$arg2 $arg4
				] 3 [          // LEFT
					$arg2 0 (*f $arg3 -1)
				]
			]
		] [ $arg2 $arg3 $arg4 ]
	]
]








UImenu "coswave_test" [
	uigrid 2 $.UI_pad_L $.UI_pad_L [
		UIhsliderslim wavelength 200 10000 200 0.25 $.UI_pad_6XL
		uispace $.UI_pad_L 0 [
			uialign -1 0
			uiclamp.x
			uihlist 0 [
				uiclamp.x
				uitext (UIcoswave $wavelength) 0.6
				uitext (concatword (+ (round (*f 100 (UIcoswave $wavelength))) 0) "%") 0.8
			]
		]

		uicolor (coswave.RGB24 255 10 20 120 100 230 $wavelength) 0.25 0.5 [
			uivlist 0 [
				uialign 0 1
				uiline 0xFFFFFF 0.25
				uifill 0 (*f (UIcoswave $wavelength) 0.5)
			]
		]
		uicolor (coswave.INT 0x7864E6 0xFF0A14 $wavelength) 0.25 0.5 [
			uivlist 0 [
				uialign 0 1
				uiline 0xFFFFFF 0.25
				uifill 0 (*f (UIcoswave $wavelength) 0.5)
			]
		]
	]
] [ wavelength = 2000 ]

UImenu "slider_test" [
	uihlist 0 [
		uifill 0.2 0.2 [
			uivlist 0 [
				uiclamp.e
				UIhspectrumslider a 0 255
				UIhsliderslim b 0 255 1
				UIhcolorslider c 0 255 0xFF0000 0x0000FF
				UIhslider d 0 255 1 // 0.05 0.05
				uiclamp*e
			]
		]
		uifill 0.2 0.2 [
			uihlist 0 [
				uiclamp.e
				UIvspectrumslider a 0 255
				UIvsliderslim b 0 255 1
				UIvcolorslider c 0 255 0xFF0000 0x0000FF
				UIvslider d 0 255 1// 0.05 0.05
				uiclamp*e
			]
		]
	]
]



snake_reset = [
	.sp =   0 // points
	.sf = 600 // speed (ms)

	.sw =  30 // board width
	.sh =  20 // board height
	.st = (* $.sw $.sh) // total board tiles

	.sdirs = (format "%1 0 UP -1 90 LEFT %2 180 DOWN 1 270 RIGHT" (- 0 $.sw) $.sw) // direction offset, rotation, key
	.scurd = (at $.sdirs (* (rnd 4) 3)) // direction
	.snewd = $.scurd // new input direction
	.sinpt = "" // input list

	.state = 0 // game state, 0 = waiting, 1 = running, 2 = ended
	.time1 = 0 // game start (ms)
	.time2 = 0 // game end (ms)

	// locate spawn point within a centered board area of X-6 and Y-6, then generate the extra
	// two segments of the snake in the opposite direction from where it is facing at the start
	.snake = (+ (* (rnd (- $.sh 3) 3) $.sw) (rnd (- $.sw 3) 3))
	.snake = (concat $.snake (- $.snake $.scurd) (- $.snake (* $.scurd 2)))

	// pick new random location for the apple to avoid overlapping the snake segments, but it
	// will need fixing later to avoid never-ending random search for unoccupied numbers (XXX)
	//.apple = (at $.snake 0)
	//while [>= (listfind= $.snake $.apple) 0] [ .apple = (rnd (* $.sw $.sh)) ]
	snake_apple
]

snake_apple = [
	if $arg1 [] [ .apple = (at $.snake 0) ]
	while [>= (listfind= (concat $arg1 $.snake) $.apple) 0] [ .apple = (rnd $.st) ]
]

snake_loop = [
	if $arg1 [
		snake_reset
		.state = 1
		.time1 = $getmillis

		// EXTRA STUFF

		sleep $.sf [ snake_loop ]
	] [
		arg2 = (? $.snewd $.snewd $.scurd) // direction offset, new if key was pressed, otherwise go with current dir
		arg3 = (at $.snake 0)    // current position of snake's head
		arg4 = (+ $arg3 $arg2)   // new position of head

		if (&& [< 0 $arg4 $.st ] [ // ensure new head position is within board limits
			if (= (abs $arg2) 1) [ // check if sideways movement 
				= (div $arg3 $.sw) (div $arg4 $.sw) // check if still on the same row
			] [ result 1 ] // default to 1 otherwise
			// CURRENTLY DOES NOT CHECK FOR SELF COLLISION, TO-DO LATER
		]) [
			arg5 = (= $arg4 $.apple) // is the new head position on the apple? 

			if $arg5 [ snake_apple $arg4 ]
			.snake = (concat $arg4 (listsplice $.snake "" (+ (listlen $.snake) -1 $arg5) 1))
			.scurd = $arg2
			sleep $.sf [ snake_loop ]
		] [
			.state = 2
			.time2 = $getmillis
		]
	]
]


UImenu "snake" [
	local time
	uivlist $.UI_pad_L [
		uihlist 0 [
			uiclamp.x
			uitext (concat "Points:" $.sp) 0.7
			UIbutton "hold2" [ uitext "Start Game" 0.6 ] 0 0 [ snake_loop 1 ]
			time = (case $.state 0 0 1 (- $getmillis $.time1) () (- $.time2 $.time1))
			uitext (concatword (div $time 1000) ":" (pad0 (mod $time 1000) 3)) 0.7
		]
		UIbox "box d d d n n" 0 0 [
			uioffset (*f $.UI_pad_2XL (mod $.apple $.sw)) (*f $.UI_pad_2XL (div $.apple $.sw)) [
				UIfastimg "ui/" "ui_radio" "1" $.UI_pad_2XL
			]
			loop i (listlen $.snake) [
				uioffset (*f $.UI_pad_2XL (mod (at $.snake $i) $.sw)) (*f $.UI_pad_2XL (div (at $.snake $i) $.sw)) [
					uifill $.UI_pad_2XL $.UI_pad_2XL [
						if $i [
							UIfastimg "ui/" "ui_bar" "1" (-f $.UI_pad_2XL (*f (divf 0.50 (- (listlen $.snake) 1)) $i $.UI_pad_2XL))
						] [
							UIfastimg "ui/" "ui_bar" "1" $.UI_pad_2XL 0 [
								uispace $.UI_pad_MS $.UI_pad_MS [
									case (? $.snewd $.snewd $.scurd) (- 0 $.sw) [
										uialign  0 -1
										UItriangle (? (iskeyheld "UP") $c_fill $c_menu) $.UI_pad_M $.UI_pad_S 0
									] -1 [
										uialign -1  0
										UItriangle (? (iskeyheld "LEFT") $c_fill $c_menu) $.UI_pad_M $.UI_pad_S 90
									] $.sw [
										uialign  0  1
										UItriangle (? (iskeyheld "DOWN") $c_fill $c_menu) $.UI_pad_M $.UI_pad_S 180
									] 1 [
										uialign  1  0
										UItriangle (? (iskeyheld "RIGHT") $c_fill $c_menu) $.UI_pad_M $.UI_pad_S 270
									]
								]
							]
						]
					]
				]
			]
			uialign* -1 -1
			uivlist 0 [
				uiclamp.x
				loop x $.sh [ uioutline $c_line 0 $.UI_pad_2XL ]
				uiclamp*x
			]
			uihlist 0 [
				uiclamp.y
				loop x $.sw [ uioutline $c_line $.UI_pad_2XL 0 ]
				uiclamp*y
			]
		]
	]
	if (= $.state 1) [
		looplist3 offset dir key $.sdirs [
			if (iskeyheld $key) [
				if (&& [< (listfind= $.sinpt $offset) 0] [!= $offset (* $.scurd -1)]) [
					.sinpt = (listsplice $.sinpt $offset 0 0)
					.snewd = $offset
				]
			] [
				if (>= (listfind= $.sinpt $offset) 0) [
					.sinpt = (listdel $.sinpt $offset)
					.snewd = (at $.sinpt 0)
				]
			]
		]
	]
] [	snake_reset ]



.tl_table = [
    "main" [
        "spam" "shit" "lmao"
    ]
]

.tl = [
	// if given arg2, use it as UI name
	if $arg2 [] [ arg2 = $uiname ]
	// index of UI name block
	arg3 = (indexof $.tl_table $arg2)
	// string block for given UI name
	arg4 = (at $.tl_table (+ $arg3 1))

	if $.UI_lang [
		if (&& [> $arg3 -1] [> (indexof $arg4 $arg1) -1]) [
			at $arg4 $.UI_lang
		] [ concatword "^f3" $arg1 ]
	] [ result $arg1 ]
]





UImenu "symbols_test" [
	uigrid 26 0 0 [
		looplist n [ a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 0 ` ~ - _ = + { } "[" "]" \ | ";" : ' "^"" , < . > / ? ! "@" # $ % & * "(" ")" ] [ // "
			uivlist 0 [ 
				uitext $n 2
				uifont "webdings" [
					uitext (concatword "^f2" $n) 2
				]
			]
		]
	]
]
